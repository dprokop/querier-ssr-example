//     This code was generated by a Reinforced.Typings tool. 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.

export interface EntityData
{
    id: string;
}
export class Request<TResponse>
{
    constructor (data?: object)
    {
        if (data) { Object.assign(this, data); }
    }
    private $response: TResponse;
}
export class SeedDataCommand extends Request<SeedDataCommandResponse>
{
    constructor (data?: { [P in keyof SeedDataCommand]: SeedDataCommand[P] })
    {
        super(data);
    }
    public $type?: string = 'SeedDataCommand';
}
export interface SeedDataCommandResponse
{
    results: string[];
}
export interface StoreContext
{
    store: StoreData;
    language: LanguageData;
    currency: CurrencyData;
}
export interface StoreData
{
    id: string;
    name: string;
    languages: LanguageData[];
    currencies: CurrencyData[];
}
export class GetStoreContextQuery extends Request<GetStoreContextQueryResponse>
{
    constructor (data?: { [P in keyof GetStoreContextQuery]: GetStoreContextQuery[P] })
    {
        super(data);
    }
    public $type?: string = 'GetStoreContextQuery';
    public storeId?: string;
    public languageCode?: string;
    public currencyCode?: string;
    public customer?: CustomerData;
}
export interface GetStoreContextQueryResponse
{
    storeContext: StoreContext;
    shoppingContext: ShoppingContext;
    shoppingCartSummary: ShoppingCartSummaryData;
    availableStores: StoreData[];
}
export class BaseCartRequest<TResponse> extends Request<TResponse>
{
    constructor (data?: object)
    {
        super(data);
    }
    public shoppingContext: ShoppingContext;
}
export interface BaseCartRequestResponse
{
    shoppingCart: ShoppingCartData;
}
export interface ShoppingCartData extends EntityData
{
    items: ShoppingCartItemData[];
    subTotal: MoneyData;
    shippingTotal: MoneyData;
    total: MoneyData;
}
export interface ShoppingCartItemData extends EntityData
{
    baseModel: BaseModelData;
    priceGroup: PriceGroupData;
    options: OptionVariationData[];
    accessories: AccessoryVariationData[];
    quantity: number;
}
export interface ShoppingCartSummaryData extends EntityData
{
    numberOfItems: number;
    total: MoneyData;
}
export interface ShoppingContext
{
    storeId: string;
    languageCode: string;
    currencyCode: string;
    customer: CustomerData;
}
export class GetCartQuery extends Request<GetCartQueryResponse>
{
    constructor (data?: { [P in keyof GetCartQuery]: GetCartQuery[P] })
    {
        super(data);
    }
    public $type?: string = 'GetCartQuery';
    public shoppingContext: ShoppingContext;
}
export interface GetCartQueryResponse
{
    shoppingCart: ShoppingCartData;
    shoppingCartSummary: ShoppingCartSummaryData;
}
export class AddProductToCartCommand extends BaseCartRequest<AddProductToCartCommandResponse>
{
    constructor (data?: { [P in keyof AddProductToCartCommand]: AddProductToCartCommand[P] })
    {
        super(data);
    }
    public $type?: string = 'AddProductToCartCommand';
    public productConfiguration: ProductConfigurationData;
    public quantity: number;
}
export interface AddProductToCartCommandResponse extends BaseCartRequestResponse
{
}
export class ClearCartCommand extends BaseCartRequest<ClearCartCommandResponse>
{
    constructor (data?: { [P in keyof ClearCartCommand]: ClearCartCommand[P] })
    {
        super(data);
    }
    public $type?: string = 'ClearCartCommand';
}
export interface ClearCartCommandResponse extends BaseCartRequestResponse
{
}
export class RemoveItemFromCartCommand extends BaseCartRequest<RemoveItemFromCartCommandResponse>
{
    constructor (data?: { [P in keyof RemoveItemFromCartCommand]: RemoveItemFromCartCommand[P] })
    {
        super(data);
    }
    public $type?: string = 'RemoveItemFromCartCommand';
    public itemId: string;
}
export interface RemoveItemFromCartCommandResponse extends BaseCartRequestResponse
{
}
export interface AccessoryData extends EntityData
{
    name: string;
    variations: AccessoryVariationData[];
}
export interface AccessoryVariationData extends EntityData
{
    name: string;
    price: MoneyData;
    image: ImageData;
}
export interface BaseModelData extends EntityData
{
    name: string;
    code: string;
    description: string;
    price: MoneyData;
    specification: BaseModelDetailsData;
    moreInformation: BaseModelDetailsData;
    image: ImageData;
}
export interface BaseModelDetailsData
{
    description?: string;
    properties: PropertyData[];
    documents: DocumentData[];
}
export interface OptionData extends EntityData
{
    name: string;
    defaultVariationId?: string;
    type: OptionType;
    groups: OptionVariationGroupData[];
}
export interface OptionVariationData extends EntityData
{
    name: string;
    code: string;
    price?: MoneyData;
    image: ImageData;
}
export interface OptionVariationGroupData
{
    name: string;
    priceGroup?: number;
    variations: OptionVariationData[];
}
export interface PriceGroupData extends EntityData
{
    number: number;
    price: MoneyData;
}
export interface ProductConfigurationData
{
    baseModelId: string;
    priceGroupId?: string;
    optionsIds: string[];
    accessoriesIds: string[];
}
export class GetProductByIdQuery extends Request<GetProductQueryResponse>
{
    constructor (data?: { [P in keyof GetProductByIdQuery]: GetProductByIdQuery[P] })
    {
        super(data);
    }
    public $type?: string = 'GetProductByIdQuery';
    public productId: string;
    public shoppingContext: ShoppingContext;
}
export class GetProductBySlugQuery extends Request<GetProductQueryResponse>
{
    constructor (data?: { [P in keyof GetProductBySlugQuery]: GetProductBySlugQuery[P] })
    {
        super(data);
    }
    public $type?: string = 'GetProductBySlugQuery';
    public slug: string;
    public shoppingContext: ShoppingContext;
}
export interface GetProductQueryResponse
{
    baseModel: BaseModelData;
    priceGroups: PriceGroupData[];
    options: OptionData[];
    accessories: AccessoryData[];
}
export interface OrderData
{
    id: string;
    number: string;
    contactDetails: ContactDetailsData;
    shippingAddress: AddressData;
    items: OrderItemData[];
}
export interface OrderItemData extends EntityData
{
    baseModel: BaseModelData;
    priceGroup: PriceGroupData;
    options: OptionVariationData[];
    accessories: AccessoryVariationData[];
    quantity: number;
}
export class PlaceOrderCommand extends Request<PlaceOrderCommandResponse>
{
    constructor (data?: { [P in keyof PlaceOrderCommand]: PlaceOrderCommand[P] })
    {
        super(data);
    }
    public $type?: string = 'PlaceOrderCommand';
    public shoppingContext: ShoppingContext;
    public contactDetails: ContactDetailsData;
    public shippingAddress: AddressData;
}
export interface PlaceOrderCommandResponse
{
    order: OrderData;
}
export interface ContactDetailsData
{
    firstName: string;
    lastName: string;
    email: string;
    phone: string;
}
export interface CustomerData extends EntityData
{
    userId: string;
    userName: string;
    isRegistered: boolean;
}
export interface AddressData
{
    street: string;
    zipCode: string;
    city: string;
    country: CountryData;
}
export interface CountryData
{
    code: string;
    name: string;
}
export interface CurrencyData
{
    code: string;
}
export interface DocumentData
{
    name: string;
    url: string;
}
export interface ImageData
{
    name: string;
    url: ImageUrls;
}
export interface ImageUrls
{
    original: string;
    large: string;
    small: string;
}
export interface LanguageData
{
    code: string;
}
export interface MoneyData
{
    amount: number;
    currency: CurrencyData;
}
export interface PropertyData
{
    name: string;
    value: string;
}
export enum OptionType { 
    NotAffectingPrice = 0, 
    AffectingPrice = 1, 
    Fabric = 2, 
}
